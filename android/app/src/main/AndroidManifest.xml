import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:image_picker/image_picker.dart';
import 'package:intl/intl.dart';

void main() {
  runApp(MyApp());
}

class BlogItem {
  String title;
  DateTime date;
  String body;
  String? imageUrl;
  int quantity;

  BlogItem({
    required this.title,
    required this.date,
    required this.body,
    this.imageUrl,
    required this.quantity,
  });
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Blog App',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: BlogListScreen(),
    );
  }
}

class BlogListScreen extends StatefulWidget {
  @override
  _BlogListScreenState createState() => _BlogListScreenState();
}

class _BlogListScreenState extends State<BlogListScreen> {
  final List<BlogItem> _blogItems = [];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Blog List'),
      ),
      body: ListView.builder(
        itemCount: _blogItems.length,
        itemBuilder: (context, index) {
          final blogItem = _blogItems[index];
          return ListTile(
            title: Text(blogItem.title),
            subtitle: Text(DateFormat('yyyy-MM-dd').format(blogItem.date)),
            onTap: () async {
              final updatedBlogItem = await Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => BlogItemScreen(blogItem: blogItem),
                ),
              );
              if (updatedBlogItem != null) {
                setState(() {
                  _blogItems[index] = updatedBlogItem;
                });
              }
            },
            onLongPress: () {
              showDialog(
                context: context,
                builder: (BuildContext context) {
                  return AlertDialog(
                    title: const Text('Delete Item'),
                    content: const Text('Are you sure you want to delete this item?'),
                    actions: <Widget>[
                      TextButton(
                        onPressed: () {
                          Navigator.of(context).pop();
                        },
                        child: const Text('Cancel'),
                      ),
                      TextButton(
                        onPressed: () {
                          setState(() {
                            _blogItems.removeAt(index);
                          });
                          Navigator.of(context).pop();
                        },
                        child: const Text('Delete'),
                      ),
                    ],
                  );
                },
              );
            },
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () async {
          final newBlogItem = await Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => AddEditBlogItemScreen(),
            ),
          );
          if (newBlogItem != null) {
            setState(() {
              _blogItems.add(newBlogItem);
            });
          }
        },
        child: const Icon(Icons.add),
      ),
    );
  }
}

class AddEditBlogItemScreen extends StatefulWidget {
  @override
  _AddEditBlogItemScreenState createState() => _AddEditBlogItemScreenState();
}

class _AddEditBlogItemScreenState extends State<AddEditBlogItemScreen> {
  final TextEditingController _titleController = TextEditingController();
  final TextEditingController _bodyController = TextEditingController();
  final TextEditingController _quantityController = TextEditingController();
  File? _imageFile;
  bool _isTitleValid = true;
  bool _isBodyValid = true;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Add Blog Item'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            TextField(
              controller: _titleController,
              decoration: InputDecoration(
                labelText: 'Item name',
                errorText: _isTitleValid ? null : 'Title cannot be empty',
              ),
              onChanged: (_) {
                setState(() {
                  _isTitleValid = _titleController.text.isNotEmpty;
                });
              },
            ),
            const SizedBox(height: 16.0),
            TextField(
              controller: _bodyController,
              decoration: InputDecoration(
                labelText: 'Description',
                errorText: _isBodyValid ? null : 'Description cannot be empty',
              ),
              maxLines: 5,
              onChanged: (_) {
                setState(() {
                  _isBodyValid = _bodyController.text.isNotEmpty;
                });
              },
            ),
            const SizedBox(height: 16.0),
            TextFormField(
              controller: _quantityController,
              decoration: const InputDecoration(labelText: 'Quantity'),
              keyboardType: TextInputType.number,
              inputFormatters: <TextInputFormatter>[
                FilteringTextInputFormatter.digitsOnly
              ],
            ),
            const SizedBox(height: 16.0),
            ElevatedButton(
              onPressed: () async {
                final pickedFile =
                    await ImagePicker().pickImage(source: ImageSource.gallery);
                setState(() {
                  _imageFile =
                      pickedFile != null ? File(pickedFile.path) : null;
                });
              },
              child: const Text('Select Image'),
            ),
            const SizedBox(height: 16.0),
            ElevatedButton(
              onPressed: () {
                if (_isTitleValid && _isBodyValid) {
                  Navigator.pop(
                    context,
                    BlogItem(
                      title: _titleController.text,
                      date: DateTime.now(),
                      body: _bodyController.text,
                      imageUrl: _imageFile?.path,
                      quantity: int.tryParse(_quantityController.text) ?? 0,
                    ),
                  );
                }
              },
              child: const Text('Save'),
            ),
          ],
        ),
      ),
    );
  }
}

class BlogItemScreen extends StatefulWidget {
  final BlogItem blogItem;

  const BlogItemScreen({Key? key, required this.blogItem}) : super(key: key);

  @override
  _BlogItemScreenState createState() => _BlogItemScreenState();
}

class _BlogItemScreenState extends State<BlogItemScreen> {
  late TextEditingController _titleController;
  late TextEditingController _bodyController;
  late TextEditingController _quantityController;

  @override
  void initState() {
    super.initState();
    _titleController = TextEditingController(text: widget.blogItem.title);
    _bodyController = TextEditingController(text: widget.blogItem.body);
    _quantityController =
        TextEditingController(text: widget.blogItem.quantity.toString());
  }

  @override
  void dispose() {
    _titleController.dispose();
    _bodyController.dispose();
    _quantityController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Edit Blog Item'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            TextField(
              controller: _titleController,
              decoration: const InputDecoration(labelText: 'Item name'),
            ),
            const SizedBox(height: 16.0),
            TextField(
              controller: _bodyController,
              decoration: const InputDecoration(labelText: 'Description'),
              maxLines: 5,
            ),
            const SizedBox(height: 16.0),
            TextFormField(
              controller: _quantityController,
              decoration: const InputDecoration(labelText: 'Quantity'),
              keyboardType: TextInputType.number,
              inputFormatters: <TextInputFormatter>[
                FilteringTextInputFormatter.digitsOnly
              ],
            ),
            const SizedBox(height: 16.0),
            if (widget.blogItem.imageUrl != null)
              Image.network(
                widget.blogItem.imageUrl!,
                fit: BoxFit.cover,
                height: 200,
              ),
            const SizedBox(height: 16.0),
            ElevatedButton(
              onPressed: () {
                Navigator.pop(
                  context,
                  BlogItem(
                    title: _titleController.text,
                    date: widget.blogItem.date,
                    body: _bodyController.text,
                    imageUrl: widget.blogItem.imageUrl,
                    quantity: int.tryParse(_quantityController.text) ?? 0,
                  ),
                );
              },
              child: const Text('Save'),
            ),
          ],
        ),
      ),
    );
  }
}